//
// GLMath - MatInits.swift
//
// Initializers for matrix types.
//
// Copyright (c) 2016 The GLMath authors.
// Licensed under MIT License.

// NOTE:
// - Do NOT edit this file. Edit file `MatInits.swift.gyb` instead.

import simd

extension double2x2 {

    public init (
        _ m11: Double, _ m21: Double, _ m12: Double, _ m22: Double
    ) {
        self.init(
            double2(m11, m21), double2(m12, m22)
        )
    }
}

extension double2x3 {

    public init (
        _ m11: Double, _ m21: Double, _ m31: Double, _ m12: Double, _ m22: Double, _ m32: Double
    ) {
        self.init(
            double3(m11, m21, m31), double3(m12, m22, m32)
        )
    }
}

extension double2x4 {

    public init (
        _ m11: Double, _ m21: Double, _ m31: Double, _ m41: Double, _ m12: Double, _ m22: Double, _ m32: Double, _ m42: Double
    ) {
        self.init(
            double4(m11, m21, m31, m41), double4(m12, m22, m32, m42)
        )
    }
}

extension double3x2 {

    public init (
        _ m11: Double, _ m21: Double, _ m12: Double, _ m22: Double, _ m13: Double, _ m23: Double
    ) {
        self.init(
            double2(m11, m21), double2(m12, m22), double2(m13, m23)
        )
    }
}

extension double3x3 {

    public init (
        _ m11: Double, _ m21: Double, _ m31: Double, _ m12: Double, _ m22: Double, _ m32: Double, _ m13: Double, _ m23: Double, _ m33: Double
    ) {
        self.init(
            double3(m11, m21, m31), double3(m12, m22, m32), double3(m13, m23, m33)
        )
    }
}

extension double3x4 {

    public init (
        _ m11: Double, _ m21: Double, _ m31: Double, _ m41: Double, _ m12: Double, _ m22: Double, _ m32: Double, _ m42: Double, _ m13: Double, _ m23: Double, _ m33: Double, _ m43: Double
    ) {
        self.init(
            double4(m11, m21, m31, m41), double4(m12, m22, m32, m42), double4(m13, m23, m33, m43)
        )
    }
}

extension double4x2 {

    public init (
        _ m11: Double, _ m21: Double, _ m12: Double, _ m22: Double, _ m13: Double, _ m23: Double, _ m14: Double, _ m24: Double
    ) {
        self.init(
            double2(m11, m21), double2(m12, m22), double2(m13, m23), double2(m14, m24)
        )
    }
}

extension double4x3 {

    public init (
        _ m11: Double, _ m21: Double, _ m31: Double, _ m12: Double, _ m22: Double, _ m32: Double, _ m13: Double, _ m23: Double, _ m33: Double, _ m14: Double, _ m24: Double, _ m34: Double
    ) {
        self.init(
            double3(m11, m21, m31), double3(m12, m22, m32), double3(m13, m23, m33), double3(m14, m24, m34)
        )
    }
}

extension double4x4 {

    public init (
        _ m11: Double, _ m21: Double, _ m31: Double, _ m41: Double, _ m12: Double, _ m22: Double, _ m32: Double, _ m42: Double, _ m13: Double, _ m23: Double, _ m33: Double, _ m43: Double, _ m14: Double, _ m24: Double, _ m34: Double, _ m44: Double
    ) {
        self.init(
            double4(m11, m21, m31, m41), double4(m12, m22, m32, m42), double4(m13, m23, m33, m43), double4(m14, m24, m34, m44)
        )
    }
}

extension float2x2 {

    public init (
        _ m11: Float, _ m21: Float, _ m12: Float, _ m22: Float
    ) {
        self.init(
            float2(m11, m21), float2(m12, m22)
        )
    }
}

extension float2x3 {

    public init (
        _ m11: Float, _ m21: Float, _ m31: Float, _ m12: Float, _ m22: Float, _ m32: Float
    ) {
        self.init(
            float3(m11, m21, m31), float3(m12, m22, m32)
        )
    }
}

extension float2x4 {

    public init (
        _ m11: Float, _ m21: Float, _ m31: Float, _ m41: Float, _ m12: Float, _ m22: Float, _ m32: Float, _ m42: Float
    ) {
        self.init(
            float4(m11, m21, m31, m41), float4(m12, m22, m32, m42)
        )
    }
}

extension float3x2 {

    public init (
        _ m11: Float, _ m21: Float, _ m12: Float, _ m22: Float, _ m13: Float, _ m23: Float
    ) {
        self.init(
            float2(m11, m21), float2(m12, m22), float2(m13, m23)
        )
    }
}

extension float3x3 {

    public init (
        _ m11: Float, _ m21: Float, _ m31: Float, _ m12: Float, _ m22: Float, _ m32: Float, _ m13: Float, _ m23: Float, _ m33: Float
    ) {
        self.init(
            float3(m11, m21, m31), float3(m12, m22, m32), float3(m13, m23, m33)
        )
    }
}

extension float3x4 {

    public init (
        _ m11: Float, _ m21: Float, _ m31: Float, _ m41: Float, _ m12: Float, _ m22: Float, _ m32: Float, _ m42: Float, _ m13: Float, _ m23: Float, _ m33: Float, _ m43: Float
    ) {
        self.init(
            float4(m11, m21, m31, m41), float4(m12, m22, m32, m42), float4(m13, m23, m33, m43)
        )
    }
}

extension float4x2 {

    public init (
        _ m11: Float, _ m21: Float, _ m12: Float, _ m22: Float, _ m13: Float, _ m23: Float, _ m14: Float, _ m24: Float
    ) {
        self.init(
            float2(m11, m21), float2(m12, m22), float2(m13, m23), float2(m14, m24)
        )
    }
}

extension float4x3 {

    public init (
        _ m11: Float, _ m21: Float, _ m31: Float, _ m12: Float, _ m22: Float, _ m32: Float, _ m13: Float, _ m23: Float, _ m33: Float, _ m14: Float, _ m24: Float, _ m34: Float
    ) {
        self.init(
            float3(m11, m21, m31), float3(m12, m22, m32), float3(m13, m23, m33), float3(m14, m24, m34)
        )
    }
}

extension float4x4 {

    public init (
        _ m11: Float, _ m21: Float, _ m31: Float, _ m41: Float, _ m12: Float, _ m22: Float, _ m32: Float, _ m42: Float, _ m13: Float, _ m23: Float, _ m33: Float, _ m43: Float, _ m14: Float, _ m24: Float, _ m34: Float, _ m44: Float
    ) {
        self.init(
            float4(m11, m21, m31, m41), float4(m12, m22, m32, m42), float4(m13, m23, m33, m43), float4(m14, m24, m34, m44)
        )
    }
}

